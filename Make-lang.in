# Make-lang.in -- Top level -*- makefile -*- fragment for gcc brainfuck.
.PHONY: brainfuck

brainfuck: bf1$(exeext)

# Use maximal warnings for this front end.
brainfuck-warn = $(STRICT_WARN)

BRAINFUCK_OBJS = brainfuck/brainfuck-lang.o

brainfuck_OBJS = $(GCC_OBJS) $(BRAINFUCK_OBJS)

BRAINFUCK_INSTALL_NAME := $(shell echo bf1|sed '$(program_transform_name)')
BRAINFUCK_TARGET_INSTALL_NAME := $(target_noncanonical)-$(shell echo bf1|sed '$(program_transform_name)')

bf1$(exeext): $(BRAINFUCK_OBJS) attribs.o $(BACKEND) $(LIBDEPS)
	+$(CXX) $(ALL_CXXFLAGS) $(LDFLAGS) -o $@ \
	      $(BRAINFUCK_OBJS) attribs.o $(BACKEND) $(LIBS) $(BACKENDLIBS)

brainfuck/tfspec.o: $(srcdir)/brainfuck/tfspec.c $(SYSTEM_H) coretypes.h $(TM_H) $(GCC_H) \
    $(CONFIG_H) opts.h
	(SHLIB='$(SHLIB)'; \
	$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(DRIVER_DEFINES) \
		$(INCLUDES) $(srcdir)/brainfuck/tfspec.c)

brainfuck/tfspec.o: $(srcdir)/brainfuck/tfspec.c $(SYSTEM_H) coretypes.h $(TM_H) $(GCC_H) $(CONFIG_H) $(TREE_H)

brainfuck/brainfuck-lang.o: brainfuck/brainfuck-lang.c $(GO_SYSTEM_H) coretypes.h opts.h $(TREE_H) \
	$(GIMPLE_H) $(GGC_H) toplev.h debug.h options.h $(FLAGS_H) convert.h \
	langhooks.h langhooks-def.h $(TARGET_H) $(DIAGNOSTIC_H) $(GO_C_H) \
	gt-brainfuck-brainfuck-lang.h gtype-brainfuck.h

brainfuck.srcextra:

# Build hooks:

brainfuck.all.cross:
brainfuck.start.encap:
brainfuck.rest.encap:
brainfuck.info:
brainfuck.install-info:
brainfuck.dvi:
brainfuck.pdf:
brainfuck.install-pdf:
brainfuck.html:
brainfuck.man:
brainfuck.srcinfo:
brainfuck.srcman:
brainfuck.install-plugin:

brainfuck.tags: force
	cd $(srcdir)/brainfuck; etags -o TAGS.sub *.c *.h; \
	etags --include TAGS.sub --include ../TAGS.sub

lang_checks += check-brainfuck

#
# Install hooks:
brainfuck.install-common: installdirs
	if [ -f bf1$(exeext) ] ; then \
	  rm -f $(DESTDIR)$(bindir)/$(BRAINFUCK_INSTALL_NAME)$(exeext); \
	  $(INSTALL_PROGRAM) bf1$(exeext) $(DESTDIR)$(bindir)/$(BRAINFUCK_INSTALL_NAME)$(exeext); \
	  chmod a+x $(DESTDIR)$(bindir)/$(BRAINFUCK_INSTALL_NAME)$(exeext); \
	  if [ ! -f bf-cross$(exeext) ] ; then \
	    rm -f $(DESTDIR)$(bindir)/$(BRAINFUCK_TARGET_INSTALL_NAME)$(exeext); \
	    $(LN) $(DESTDIR)$(bindir)/$(BRAINFUCK_INSTALL_NAME)$(exeext) $(DESTDIR)$(bindir)/$(BRAINFUCK_TARGET_INSTALL_NAME)$(exeext); \
	  fi ; \
	fi

brainfuck.install-man:

brainfuck.uninstall:
	-rm -f $(DESTDIR)$(bindir)/$(BRAINFUCK_INSTALL_NAME)$(exeext);
	if [ ! -f bf1-cross$(exeext) ] ; then \
	  rm -f $(DESTDIR)$(bindir)/$(BRAINFUCK_TARGET_INSTALL_NAME)$(exeext); \
	fi

#
# Clean hooks:
# A lot of the ancillary files are deleted by the main makefile.
# We just have to delete files specific to us.
brainfuck.mostlyclean:
	-rm -f brainfuck/*$(objext) brainfuck/xforward brainfuck/fflags
	-rm -f brainfuck/*$(coverageexts)
brainfuck.clean: brainfuck.mostlyclean
	-rm -rf brainfuck-headers
brainfuck.distclean:
	-rm -f brainfuck/Makefile brainfuck/Make-host brainfuck/Make-target
	-rm -f brainfuck/config.status brainfuck/config.cache
brainfuck.maintainer-clean:

#
# Stage hooks:

brainfuck.stage1: stage1-start
	-mv brainfuck/*$(objext) stage1/bf1
brainfuck.stage2: stage2-start
	-mv brainfuck/*$(objext) stage2/bf1
brainfuck.stage3: stage3-start
	-mv brainfuck/*$(objext) stage3/bf1
brainfuck.stage4: stage4-start
	-mv brainfuck/*$(objext) stage4/bf1
brainfuck.stageprofile: stageprofile-start
	-mv brainfuck/*$(objext) stageprofile/bf1
brainfuck.stagefeedback: stagefeedback-start
	-mv brainfuck/*$(objext) stagefeedback/bf1

